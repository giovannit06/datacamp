str(my_prediction)
# Use predict() as specified above to make predictions on the test set. Assign
# the result to my_prediction
my_prediction <- predict(my_tree_two, test, type = "class")
str(my_prediction)
# Create the my_solution data frame that is in line with Kaggle's standard:
# the PassengerId column should contain the PassengerId column of test
# the Survived column should contain the values in my_prediction
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
train = read.csv("train.csv") # http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv
test = read.csv("test.csv") # http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv
str(train)
str(test)
# absolute numbers
table(train$Survived)
# proportions
prop.table(table(train$Survived))
table(train$Sex, train$Survived)
table(train$Sex, train$Survived)
prop.table(table(train$Sex, train$Survived), margin = 1)
train$Child <- NA
train$Child[train$Age < 18] <- 1
train$Child[train$Age >= 18] <- 0
prop.table(table(train$Child, train$Survived), margin = 1)
# Copy of test
test_one <- test
# Initialize a Survived column to 0
test_one$Survived = 0
# Set Survived to 1 if Sex equals "female"
test_one$Survived[test_one$Sex == "female"] = 1
# Load in the R package
library(rpart)
# Build the decision tree, you want to predict Survived based on Pclass, Sex, Age,
# SibSp, Parch, Fare and Embarked.
# Use the train data to build the tree
# Use method to specify that you want to classify
my_tree_two <- rpart(Survived ~ Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
# Visualize my_tree_two with plot() and text()
plot(my_tree_two)
text(my_tree_two)
# Load the R packages rattle, rpart.plot and RColorBrewer
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Use fancyRpartPlot(my_tree) to create a much fancier visualization of your tree
fancyRpartPlot(my_tree_two)
# Use predict() as specified above to make predictions on the test set. Assign
# the result to my_prediction
my_prediction <- predict(my_tree_two, test, type = "class")
str(my_prediction)
# Create the my_solution data frame that is in line with Kaggle's standard:
# the PassengerId column should contain the PassengerId column of test
# the Survived column should contain the values in my_prediction
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
# Use predict() as specified above to make predictions on the test set. Assign
# the result to my_prediction
my_prediction <- predict(my_tree_two, test, type = "class")
# Create the my_solution data frame that is in line with Kaggle's standard:
# the PassengerId column should contain the PassengerId column of test
# the Survived column should contain the values in my_prediction
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
# Check that my_solution has 418 entries with nrow()
nrow(my_solution)
# Write the data in my_solution to "my_solution.csv" using the write.csv()
# Don't remove the row.names = FALSE argument.
write.csv(my_solution, file = "my_solution1.csv", row.names = FALSE)
super_model <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class",
control = rpart.control(minsplit = 2, cp = 0))
### Check out the resulting plot with:
fancyRpartPlot(super_model)
train_new$Title <- sub(pattern = ".*,\\s(.*\\.)\\s.*", replacement = "\\1", x = train$Name)
train_new <- train
train_new$Title <- sub(pattern = ".*,\\s(.*\\.)\\s.*", replacement = "\\1", x = train$Name)
head(train_new)
train_new
table(train_new$Title)
print(train_new[which(train_new$Title=='Capt.'),]
)
print(train_new[which(train$PassengerId=='746'),])
print(train_new[which(train_new$Title=='Don.'),])
print(train_new[which(train_new$Title=='Jonkheer.'),])
table(train_new$Title)
print(train_new[which(train_new$Title=='Major.'),])
print(train_new[which(train_new$Title=='Mme.'),])
print(train_new[which(train_new$Title=='Mrs. Martin (Elizabeth L.'),])
print(train_new[which(train_new$Title=='the Countess.'),])
train_new$Title[train_new$Title == "Col."] <- "Col"
train_new$Title[train_new$Title == "Dr."] <- "Dr"
train_new$Title[train_new$Title == "Lady."] <- "Lady"
train_new$Title[train_new$Title == "Master."] <- "Master"
train_new$Title[train_new$Title == "Miss."] <- "Miss"
train_new$Title[train_new$Title == "Mlle."] <- "Mlle"
train_new$Title[train_new$Title == "Mr."] <- "Mr"
train_new$Title[train_new$Title == "Mrs."] <- "Mrs"
train_new$Title[train_new$Title == "Ms."] <- "Ms"
train_new$Title[train_new$Title == "Rev."] <- "Rev"
train_new$Title[train_new$Title == "Sir."] <- "Sir"
train_new$Title[train_new$PassengerId == "746"] <- "Sir"
train_new$Title[train_new$PassengerId == "31"] <- "Sir"
train_new$Title[train_new$PassengerId == "450"] <- "Sir"
train_new$Title[train_new$PassengerId == "537"] <- "Sir"
train_new$Title[train_new$PassengerId == "823"] <- "Lady"
train_new$Title[train_new$PassengerId == "370"] <- "Mlle"
train_new$Title[train_new$PassengerId == "514"] <- "Mrs"
train_new$Title[train_new$PassengerId == "760"] <- "Lady"
table(train_new$Title)
train_new <- train
train_new$Title <- sub(pattern = ".*,\\s(.*\\.)\\s.*", replacement = "\\1", x = train$Name)
test_new <- test
test_new$Title <- sub(pattern = ".*,\\s(.*\\.)\\s.*", replacement = "\\1", x = test$Name)
train_new$Title[train_new$Title == "Col."] <- "Col"
train_new$Title[train_new$Title == "Dr."] <- "Dr"
train_new$Title[train_new$Title == "Lady."] <- "Lady"
train_new$Title[train_new$Title == "Master."] <- "Master"
train_new$Title[train_new$Title == "Miss."] <- "Miss"
train_new$Title[train_new$Title == "Mlle."] <- "Mlle"
train_new$Title[train_new$Title == "Mr."] <- "Mr"
train_new$Title[train_new$Title == "Mrs."] <- "Mrs"
train_new$Title[train_new$Title == "Ms."] <- "Ms"
train_new$Title[train_new$Title == "Rev."] <- "Rev"
train_new$Title[train_new$Title == "Sir."] <- "Sir"
train_new$Title[train_new$PassengerId == "746"] <- "Sir"
train_new$Title[train_new$PassengerId == "31"] <- "Sir"
train_new$Title[train_new$PassengerId == "450"] <- "Sir"
train_new$Title[train_new$PassengerId == "537"] <- "Sir"
train_new$Title[train_new$PassengerId == "823"] <- "Lady"
train_new$Title[train_new$PassengerId == "370"] <- "Mlle"
train_new$Title[train_new$PassengerId == "514"] <- "Mrs"
train_new$Title[train_new$PassengerId == "760"] <- "Lady"
table(test_new$Title)
print(test_new[which(test_new$Title=='Dona.'),])
train_new <- train
train_new$Title <- sub(pattern = ".*,\\s(.*\\.)\\s.*", replacement = "\\1", x = train$Name)
test_new <- test
test_new$Title <- sub(pattern = ".*,\\s(.*\\.)\\s.*", replacement = "\\1", x = test$Name)
train_new$Title[train_new$Title == "Col."] <- "Col"
train_new$Title[train_new$Title == "Dr."] <- "Dr"
train_new$Title[train_new$Title == "Lady."] <- "Lady"
train_new$Title[train_new$Title == "Master."] <- "Master"
train_new$Title[train_new$Title == "Miss."] <- "Miss"
train_new$Title[train_new$Title == "Mlle."] <- "Mlle"
train_new$Title[train_new$Title == "Mr."] <- "Mr"
train_new$Title[train_new$Title == "Mrs."] <- "Mrs"
train_new$Title[train_new$Title == "Ms."] <- "Ms"
train_new$Title[train_new$Title == "Rev."] <- "Rev"
train_new$Title[train_new$Title == "Sir."] <- "Sir"
train_new$Title[train_new$PassengerId == "746"] <- "Sir"
train_new$Title[train_new$PassengerId == "31"] <- "Sir"
train_new$Title[train_new$PassengerId == "450"] <- "Sir"
train_new$Title[train_new$PassengerId == "537"] <- "Sir"
train_new$Title[train_new$PassengerId == "823"] <- "Lady"
train_new$Title[train_new$PassengerId == "370"] <- "Mlle"
train_new$Title[train_new$PassengerId == "514"] <- "Mrs"
train_new$Title[train_new$PassengerId == "760"] <- "Lady"
test_new$Title[test_new$Title == "Col."] <- "Col"
test_new$Title[test_new$Title == "Dr."] <- "Dr"
test_new$Title[test_new$Title == "Lady."] <- "Lady"
test_new$Title[test_new$Title == "Master."] <- "Master"
test_new$Title[test_new$Title == "Miss."] <- "Miss"
test_new$Title[test_new$Title == "Mlle."] <- "Mlle"
test_new$Title[test_new$Title == "Mr."] <- "Mr"
test_new$Title[test_new$Title == "Mrs."] <- "Mrs"
test_new$Title[test_new$Title == "Ms."] <- "Ms"
test_new$Title[test_new$Title == "Rev."] <- "Rev"
test_new$Title[test_new$Title == "Sir."] <- "Sir"
test_new$Title[test_new$PassengerId == "1306"] < "Lady"
train_new$Title[train_new$Title == "Col."] <- "Col"
train_new$Title[train_new$Title == "Dr."] <- "Dr"
train_new$Title[train_new$Title == "Lady."] <- "Lady"
train_new$Title[train_new$Title == "Master."] <- "Master"
train_new$Title[train_new$Title == "Miss."] <- "Miss"
train_new$Title[train_new$Title == "Mlle."] <- "Mlle"
train_new$Title[train_new$Title == "Mr."] <- "Mr"
train_new$Title[train_new$Title == "Mrs."] <- "Mrs"
train_new$Title[train_new$Title == "Ms."] <- "Ms"
train_new$Title[train_new$Title == "Rev."] <- "Rev"
train_new$Title[train_new$Title == "Sir."] <- "Sir"
train_new$Title[train_new$PassengerId == "746"] <- "Sir"
train_new$Title[train_new$PassengerId == "31"] <- "Sir"
train_new$Title[train_new$PassengerId == "450"] <- "Sir"
train_new$Title[train_new$PassengerId == "537"] <- "Sir"
train_new$Title[train_new$PassengerId == "823"] <- "Lady"
train_new$Title[train_new$PassengerId == "370"] <- "Mlle"
train_new$Title[train_new$PassengerId == "514"] <- "Mrs"
train_new$Title[train_new$PassengerId == "760"] <- "Lady"
test_new$Title[test_new$Title == "Col."] <- "Col"
test_new$Title[test_new$Title == "Dr."] <- "Dr"
test_new$Title[test_new$Title == "Lady."] <- "Lady"
test_new$Title[test_new$Title == "Master."] <- "Master"
test_new$Title[test_new$Title == "Miss."] <- "Miss"
test_new$Title[test_new$Title == "Mlle."] <- "Mlle"
test_new$Title[test_new$Title == "Mr."] <- "Mr"
test_new$Title[test_new$Title == "Mrs."] <- "Mrs"
test_new$Title[test_new$Title == "Ms."] <- "Ms"
test_new$Title[test_new$Title == "Rev."] <- "Rev"
test_new$Title[test_new$Title == "Sir."] <- "Sir"
test_new$Title[test_new$PassengerId == "1306"] <- "Lady"
table(test_new$Title)
write.csv(train_new, file = "train_new.csv")
write.csv(test_new, file = "train_new.csv")
write.csv(test_new, file = "test_new.csv")
write.csv(train_new, file = "train_new.csv")
train_new <- read.csv("train_new.csv")
test_new <- read.csv("test_new.csv")
head(train_new)
table(test_new$Title)
clear()
# Make prediction
my_prediction1 <- predict(my_tree_five, test_new, type = "class")
# Make results ready for submission
my_solution2 <- data.frame(PassengerId = test_new$PassengerId, Survived = my_prediction1)
write.csv(my_solution2, file = "my_solution2.csv", row.names = FALSE)
my_tree_five <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title,
data = train_new, method = "class")
# Visualize my_tree_five
fancyRpartPlot(my_tree_five)
# Make prediction
my_prediction1 <- predict(my_tree_five, test_new, type = "class")
# Make results ready for submission
my_solution2 <- data.frame(PassengerId = test_new$PassengerId, Survived = my_prediction1)
write.csv(my_solution2, file = "my_solution2.csv", row.names = FALSE)
load("~/Documents/kaggle/titanic/all_data.RData")
str(all_data)
write.csv(all_data, file = "all_data.csv", row.names = FALSE)
load("~/Documents/kaggle/titanic/all_data.RData")
# Read all data, both training and test set
all_data <- read.csv("all_data.csv")
# Passenger on row 62 and 830 do not have a value for embarkment.
# Since many passenger embarked at Southampton, we give them the value S.
all_data$Embarked[c(62, 830)] <- "S"
# Factorize embarkment codes.
all_data$Embarked <- factor(all_data$Embarked)
# Passenger on row 1044 has an NA Fare value. Let's replace it with the median
# fare value.
all_data$Fare[1044] <- median(all_data$Fare, na.rm=TRUE)
# How to fill in missing Age values ?
# We make a prediction of a passengers Age using the other variables
# an a decision tree model. This time you give method = "anova" since
# since you're predicting a continous variable.
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked +
Title + family_size,
data = all_data[!is.na(all_data$Age),],
method = "anova")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age),])
# Split the data back into a train set and a test set
train <- all_data[1:891,]
test <- all_data[892:1309,]
# Load in the package
library(randomForest)
# Set seed for reproducibility
set.seed(111)
# Apply the Random Forest Algorithm
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + Title,
data = train,
importance = TRUE,
ntree = 1000)
# Make your prediction using the test set
my_prediction2 <- predict(my_forest, test)
# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
my_solution3 <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction2)
# Write your solution away to a csv file with the name my_solution.csv
write.csv(my_solution3, file = "my_solution3.csv", row.names = FALSE)
